generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                Int                 @id @default(autoincrement())
  name              String
  date              DateTime
  location          String
  description       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  competitions      Competition[]       @relation("EventCompetitions") 
  participants      User[]              @relation("EventParticipants")
  EventParticipants EventParticipants[]
}

model User {
  id                      Int                       @id @default(autoincrement())
  username                String
  email                   String                    @unique
  passwordHash            String
  events                  Event[]                   @relation("EventParticipants") 
  competitions            Competition[]             @relation("CompetitionParticipants")
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  EventParticipants       EventParticipants[]
  CompetitionParticipants CompetitionParticipants[]
  Result                  Result[]
  AvgResult               AvgResult[]
}

model Competition {
  id                      Int                       @id @default(autoincrement())
  name                    String
  eventId                 Int?
  event                   Event?                    @relation("EventCompetitions", fields: [eventId], references: [id])
  type                    String
  gunId                   Int?
  gun                     Gun?                      @relation(fields: [gunId], references: [id])
  distance                Int
  position                String
  scope                   Int
  participants            User[]                    @relation("CompetitionParticipants")
  results                 Result[]
  createdAt               DateTime                  @default(now())
  CompetitionParticipants CompetitionParticipants[]
}

model EventParticipants {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model CompetitionParticipants {
  id            Int         @id @default(autoincrement())
  competitionId Int
  userId        Int
  competition   Competition @relation(fields: [competitionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
}

model Gun {
  id            Int           @id @default(autoincrement())
  name          String
  type          String
  caliber       String
  manufacturer  String
  scopes        Scope[]       @relation("GunScopes") // Relacja z celownikami
  silencerId    Int?
  silencer      Silencer?     @relation(fields: [silencerId], references: [id])
  grips         Grip[]
  magazineId    Int?
  magazine      Magazine?     @relation(fields: [magazineId], references: [id])
  compensatorId Int?
  compensator   Compensator?  @relation(fields: [compensatorId], references: [id])
  competitions  Competition[]
  gunScore      Result[]      @relation("GunResult")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Scope {
  id            Int      @id @default(autoincrement())
  name          String // Nazwa celownika
  type          String // Typ celownika (np. "Kolimatorowy", "Teleskopowy")
  magnification Float? // Powiększenie celownika
  lensDiameter  Float? // Średnica soczewki
  length        Float? // Długość celownika
  weight        Float? // Waga celownika
  guns          Gun[]    @relation("GunScopes") // Relacja do wielu broni
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Silencer {
  id        Int      @id @default(autoincrement())
  name      String
  length    Int?
  weight    Int?
  guns      Gun[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Compensator {
  id        Int      @id @default(autoincrement())
  name      String
  type      String   // boczna redukcja, gorna itp
  material  String?
  guns       Gun[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grip {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  material  String
  weight    Float?
  gunId     Int?
  gun       Gun?      @relation(fields: [gunId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Magazine {
  id        Int      @id @default(autoincrement())
  name      String
  material  String
  weight    Float
  gun       Gun[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id            Int         @id @default(autoincrement())
  score         Int
  userId        Int
  gunId         Int
  competitionId Int
  user          User        @relation(fields: [userId], references: [id])
  gun           Gun         @relation("GunResult", fields: [gunId], references: [id])
  competition   Competition @relation(fields: [competitionId], references: [id])
}

model AvgResult {
  id           Int      @id @default(autoincrement())
  averageScore Float
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
